/**
 * // Fetch the captured results and present them in a graphical form
 * @module     block_emotionanalysis/result
 * @copyright  2023 Rohit <rx18008@edu.rta.lv>
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
function timeStampConvertor(unixTimeStamp){const date=new Date(1e3*unixTimeStamp),year=date.getFullYear(),month=String(date.getMonth()+1).padStart(2,"0"),day=String(date.getDate()).padStart(2,"0"),hours=String(date.getHours()).padStart(2,"0"),minutes=String(date.getMinutes()).padStart(2,"0"),seconds=String(date.getSeconds()).padStart(2,"0");return"".concat(day,"-").concat(month,"-").concat(year," ").concat(hours,":").concat(minutes,":").concat(seconds)}define("block_emotionanalysis/result",["jquery","core/ajax","core/chartjs","core/modal_factory","core/modal_events","core/str"],(function($,Ajax,Chart,ModalFactory,ModalEvents,String){let response,fetchRequest,semotionChart,sctx=document.getElementById("schart");const courseSelect=document.getElementById("course-select"),userSelect=document.getElementById("user-select"),videoSelect=document.getElementById("video-select"),chartType=document.getElementById("chartType");let dataTable=document.getElementById("additional-information");const emotionContainer=document.getElementById("emotion-container");let courseSelectedValue;function removeexistingvalues(id){const selectedElement=document.getElementById(id);if("chartType"!==id&&selectedElement.options.length>1)for(;selectedElement.options.length>1;)selectedElement.options[1].remove()}function updateEmotionCounts(countsArray){const emotion={angry:0,disgusted:0,fearful:0,happy:0,neutral:0,sad:0,surprised:0};let totalDetectedEmotions=0;for(let i=0;i<countsArray.length;i++){const{count:count,state:state}=countsArray[i];emotion.hasOwnProperty(state)&&(emotion[state]=count,totalDetectedEmotions+=count)}return[emotion,totalDetectedEmotions]}function generategraph(input,ctx,chartType){"schart"===ctx.id&&null!=semotionChart&&semotionChart.destroy();const newChart=new Chart(ctx,{type:chartType,data:{labels:input.map((i=>i[0].charAt(0).toUpperCase()+i[0].slice(1))),datasets:[{label:"Count of Emotions",data:input.map((i=>i[1])),borderWidth:1,backgroundColor:["rgba(255, 99, 132)","rgba(255, 159, 64)","rgba(255, 205, 86)","rgba(75, 192, 192)","rgba(54, 162, 235)","rgba(153, 102, 255)","rgba(201, 203, 207)"]}]}});"schart"===ctx.id&&(semotionChart=newChart)}function getEmoji(emotion){return{happy:"😄",sad:"😢",angry:"😡",disgusted:"🤮",surprised:"😲",fearful:"😨",neutral:"😐"}[emotion]||"😐"}$(document).ready((function(){!function(){let request={methodname:"block_emotionanalysis_fetch_captured_data",args:{UserId:$("#UsedIdVal").val()}};Ajax.call([request])[0].done((function(data){response=data.fetchData;data.fetchData.map((item=>({courseId:item.courseid,courseName:item.coursename}))).reduce(((unique,course)=>(unique.find((c=>c.courseId===course.courseId&&c.courseName===course.courseName))||unique.push(course),unique)),[]).forEach((course=>{const option=document.createElement("option");option.value=course.courseId,option.textContent=course.courseName,courseSelect.appendChild(option)})),courseSelect.addEventListener("change",(function(event){!function(event,data){$("#delete-button").prop("disabled",!0),$("#chartType").val("");const selectedCourseId=event.target.value,filteredVideos=data.fetchData.filter((item=>item.courseid==selectedCourseId)),videoSelect=document.getElementById("video-select");removeexistingvalues("video-select");[...new Set(filteredVideos.map((item=>item.instanceid)))].forEach((videoId=>{const video=filteredVideos.find((item=>item.instanceid==videoId)),option=document.createElement("option");option.value=videoId,option.textContent=video.lectureTitle,videoSelect.appendChild(option)}))}(event,data)})),videoSelect.addEventListener("change",(function(event){!function(event,data){$("#delete-button").prop("disabled",!0);const selectedVideoId=event.target.value,courseSelectedValue=document.getElementById("course-select").value,filteredUsers=data.fetchData.filter((item=>item.instanceid==selectedVideoId&&item.courseid==courseSelectedValue)),userSelect=document.getElementById("user-select");removeexistingvalues("user-select");[...new Set(filteredUsers.map((item=>item.userid)))].forEach((userId=>{const user=filteredUsers.find((item=>item.userid==userId)),option=document.createElement("option");option.value=userId,option.textContent=user.userFullName,userSelect.appendChild(option)}))}(event,data)}))})).fail((function(data){console.log(data)}))}()})),chartType.addEventListener("change",(function(){})),videoSelect.addEventListener("change",(function(){$("#chartType").val("")})),$("#reset-button").click((function(){for($("#course-select").prop("selectedIndex",0),removeexistingvalues("user-select"),removeexistingvalues("video-select"),$("#chartType").prop("selectedIndex",0),$("#submit-button").prop("disabled",!0),$("#delete-button").prop("disabled",!0);emotionContainer.firstChild;)emotionContainer.removeChild(emotionContainer.firstChild);dataTable.innerHTML="",null!==semotionChart&&semotionChart.destroy()})),$("#delete-button").click((function(){ModalFactory.create({type:ModalFactory.types.SAVE_CANCEL,title:String.get_string("delete_record_confirmation","block_emotionanalysis"),body:String.get_string("delete_cofirmation_body","block_emotionanalysis")}).then((function(modal){modal.setSaveButtonText("Yes"),modal.getRoot().on(ModalEvents.save,(function(){let footer=Y.one(".modal-footer");footer.setContent("Deleting..."),M.util.add_spinner(Y,footer).show(),function(){let deleteRequest={methodname:"blocks_emotionanalysis_delete_records",args:{values:{courseId:courseSelect.value,userId:userSelect.value,instanceId:videoSelect.value,resourceId:fetchRequest.resourceid}}};Ajax.call([deleteRequest])[0].done((function(data){window.location.reload()})).fail((function(data){window.location.reload()}))}()})),modal.show()}))})),$("#submit-button").click((function(){courseSelectedValue=courseSelect.value;let studentSelectedValue=userSelect.value,videoSelectedValue=videoSelect.value,chartSelectedType=chartType.value;if(""!==courseSelect.value&&""==userSelect.value&&""==videoSelect.value&&""!==chartType.value){let request={methodname:"blocks_emotionanalysis_course_result",args:{values:{courseId:courseSelectedValue}}};Ajax.call([request])[0].done((function(data){const selectedText=courseSelect.options[courseSelect.selectedIndex].text;const emotionCountsArray=function(existingData){const mergedMap={};existingData.forEach((item=>{item.emotions.forEach((emotion=>{const emotionState=emotion.emotion_state,countOfEmotion=emotion.count;mergedMap[emotionState]||(mergedMap[emotionState]={emotion_state:emotionState,countofemotion:0}),mergedMap[emotionState].countofemotion+=countOfEmotion}))}));return Object.values(mergedMap)}(data.videoEmotion).map((item=>({count:item.countofemotion,state:item.emotion_state}))),[countOfSecond,totalDetectedEmotions]=updateEmotionCounts(emotionCountsArray);generategraph(Object.entries(countOfSecond),sctx,chartSelectedType);let barData=function(videoEmotionData){const mergedData={};return videoEmotionData.forEach((videoEmotion=>{const resourceid=videoEmotion.resourceid,resourceTitle=videoEmotion.resourceTitle,emotions=videoEmotion.emotions;mergedData[resourceid]||(mergedData[resourceid]={resourceid:resourceid,resourceTitle:resourceTitle,emotions:{positive:0,neutral:0,negative:0}});const mergedEmotions=mergedData[resourceid].emotions;emotions.forEach((emotion=>{const emotionState=emotion.emotion_state,count=emotion.count,category=function(emotionState){return["happy","surprised"].includes(emotionState)?"positive":"neutral"===emotionState?"neutral":"negative"}(emotionState);"positive"===category?mergedEmotions.positive+=count:"neutral"===category?mergedEmotions.neutral+=count:"negative"===category&&(mergedEmotions.negative+=count)}))})),Object.values(mergedData)}(data.videoEmotion);for(;dataTable.rows.length>0;)dataTable.deleteRow(0);let headerCell=dataTable.insertRow().insertCell();headerCell.classList.add("text-center"),headerCell.colSpan=3,headerCell.textContent="Additional Information";let courseRow=dataTable.insertRow();if(courseRow.insertCell().textContent="Course Name",courseRow.insertCell().textContent=selectedText,data.flag){let studentRow=dataTable.insertRow();studentRow.insertCell().textContent="Total Enrolled Student",studentRow.insertCell().textContent=data.enrolledStudentsCount;let activeStudentRow=dataTable.insertRow();activeStudentRow.insertCell().textContent="Number of Student Active in Course",activeStudentRow.insertCell().textContent=data.totalStudents;let finishedActivityRow=dataTable.insertRow();finishedActivityRow.insertCell().textContent="Number of Students Finished Activity (Even Single) ",finishedActivityRow.insertCell().textContent=data.finishActivity}else{let studentRow=dataTable.insertRow();studentRow.insertCell().textContent="Student Name",studentRow.insertCell().textContent=data.userName}const colors={positive:"blue",neutral:"yellow",negative:"red"};for(;emotionContainer.firstChild;)emotionContainer.removeChild(emotionContainer.firstChild);barData.forEach((item=>{const emotionSegment=document.createElement("div"),emotionTextSegment=document.createElement("div");emotionSegment.classList.add("emotion-bar"),emotionTextSegment.classList.add("emotion-bar-detail");const maxCount=item.emotions.positive+item.emotions.neutral+item.emotions.negative,titleSegment=document.createElement("div");titleSegment.textContent="Lecture Title - "+item.resourceTitle,titleSegment.style.marginBottom="10px",emotionTextSegment.appendChild(titleSegment),Object.entries(item.emotions).forEach((_ref=>{let[emotion,count]=_ref;const segment=document.createElement("div");segment.style.marginBottom="20px",segment.style.backgroundColor=colors[emotion],segment.style.height="20px",segment.style.width="".concat(count/maxCount*100,"%");const labelSegment=document.createElement("div"),percentage=(count/maxCount*100).toFixed(2);labelSegment.style.marginBottom="5px",labelSegment.textContent="".concat(emotion.charAt(0).toUpperCase()+emotion.slice(1)," ").concat(percentage,"%"),emotionTextSegment.appendChild(labelSegment),emotionSegment.appendChild(segment)})),emotionContainer.appendChild(emotionTextSegment),emotionContainer.appendChild(emotionSegment)}))})).fail((function(data){console.log(data)}))}if(""!==courseSelect.value&&""!==userSelect.value&&""!==videoSelect.value&&""!==chartType.value){for(let i=0;i<response.length;i++){let obj=response[i];if(obj.courseid==courseSelectedValue&&obj.userid==studentSelectedValue&&obj.instanceid==videoSelectedValue){fetchRequest=obj;break}}let request={methodname:"block_emotionanalysis_fetch_emotion_data",args:{values:{courseId:courseSelectedValue,userId:studentSelectedValue,instanceId:videoSelectedValue,resourceId:fetchRequest.resourceid}}};Ajax.call([request])[0].done((function(data){const emotionCountsArray=data.emotioncounts.map((item=>({count:item.countofemotion,state:item.emotion_state}))),[countOfSecond,totalDetectedEmotions]=updateEmotionCounts(emotionCountsArray);generategraph(Object.entries(countOfSecond),sctx,chartSelectedType);fetchRequest.totalduration;for(!function(formattedData){const dataContainer=document.getElementById("data-container"),infoDisplay=document.getElementById("info-display");formattedData.forEach(((data,index)=>{const emotion=data.label.toLowerCase(),rectangle=document.createElement("div"),emoji=getEmoji(emotion);rectangle.className="data-rectangle "+emotion,rectangle.innerHTML="".concat(emoji),rectangle.addEventListener("mouseover",(()=>{infoDisplay.innerHTML="Emotion: ".concat(data.label).concat(getEmoji(emotion)," <br>Timestamp: ").concat(data.value),infoDisplay.style.backgroundColor="skyblue"})),rectangle.addEventListener("mouseout",(()=>{infoDisplay.innerHTML="",infoDisplay.style.backgroundColor=""})),dataContainer.appendChild(rectangle)}))}(data.formattedData);dataTable.rows.length>0;)dataTable.deleteRow(0);let headerCell=dataTable.insertRow().insertCell();headerCell.classList.add("text-center"),headerCell.colSpan=3,headerCell.textContent="Additional Information";let studentRow=dataTable.insertRow();studentRow.insertCell().textContent="Student Name",studentRow.insertCell().textContent=fetchRequest.userFullName;let startTimeRow=dataTable.insertRow();startTimeRow.insertCell().textContent="Activity Start Time";let activityStartTime=timeStampConvertor(fetchRequest.activity_start_time);startTimeRow.insertCell().textContent=activityStartTime;let finishTimeRow=dataTable.insertRow();finishTimeRow.insertCell().textContent="Activity Finish Time",finishTimeRow.insertCell().textContent=fetchRequest.activity_finish_time;let resetActivityRow=dataTable.insertRow();resetActivityRow.insertCell().textContent="Activity Reset Status",resetActivityRow.insertCell().textContent=fetchRequest.reset_activity;let progressStatusRow=dataTable.insertRow(),progressValue=(100*data.maxTimeStamp/fetchRequest.totalduration).toFixed(1),timeFormatted=Math.floor(data.maxTimeStamp/60)+":"+(data.maxTimeStamp%60).toString().padStart(2,"0");progressStatusRow.insertCell().textContent="Progress",progressStatusRow.insertCell().textContent=progressValue+"% ("+timeFormatted+" minutes)";let activityTotalDuration=dataTable.insertRow();activityTotalDuration.insertCell().textContent="Total Duration of Lecture";let totalMinutes=Math.floor(fetchRequest.totalduration/60);activityTotalDuration.insertCell().textContent=totalMinutes+" Minutes";let totalNumberOfEmotions=dataTable.insertRow();totalNumberOfEmotions.insertCell().textContent="Total Detected Number of Emotions",totalNumberOfEmotions.insertCell().textContent=totalDetectedEmotions;let sessionInformation,sessionRow=dataTable.insertRow();data.sessionData&&(sessionInformation="Available");let sessionCell=sessionRow.insertCell();sessionCell.classList.add("text-center"),sessionCell.colSpan=3,sessionCell.textContent="Session Information  - "+sessionInformation+" Click Here",$("#delete-button").prop("disabled",!1);let sessionTable=document.createElement("table");sessionTable.classList.add("table","table-striped","table-bordered");let sheaderRow=sessionTable.insertRow();sheaderRow.insertCell().textContent="ID",sheaderRow.insertCell().textContent="Session Start Time",sheaderRow.insertCell().textContent="Session Finish Time",sheaderRow.insertCell().textContent="Watch Duration",data.sessionData.forEach((function(session,index){let sessionRow=sessionTable.insertRow();sessionRow.insertCell().textContent=index+1,sessionRow.insertCell().textContent=timeStampConvertor(session.session_start_time),sessionRow.insertCell().textContent=timeStampConvertor(session.session_finish_time),sessionRow.insertCell().textContent=session.start_watch_time+" - "+session.finish_watch_time})),$(sessionCell).on("click",(()=>{sessionTable.parentNode===document.body?document.body.removeChild(sessionTable):document.body.appendChild(sessionTable)}))}))}}))}));

//# sourceMappingURL=result.min.js.map