{"version":3,"file":"result.min.js","sources":["../src/result.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n/**\n * // Fetch the captured results and present them in a graphical form\n * @module     block_emotionanalysis/result\n * @copyright  2023 Rohit <rx18008@edu.rta.lv>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// eslint-disable-next-line no-unused-vars\ndefine(\n    ['jquery', 'core/ajax', 'core/chartjs', 'core/modal_factory', 'core/modal_events', 'core/str'],\n    function($, Ajax, Chart, ModalFactory, ModalEvents, String,) {\n        // eslint-disable-next-line no-unused-vars\n        let response;\n        let fetchRequest;\n        let semotionChart;\n        let sctx = document.getElementById('schart');\n        const courseSelect = document.getElementById('course-select');\n        const userSelect = document.getElementById('user-select');\n        const videoSelect = document.getElementById('video-select');\n        const chartType = document.getElementById('chartType');\n        let dataTable = document.getElementById('additional-information');\n        const emotionContainer = document.getElementById(\"emotion-container\");\n        let courseSelectedValue;\n        // Calling the Activity Checker on Document Ready\n        $(document).ready(function() {\n            resultFetcher();\n        });\n        chartType.addEventListener('change', function() {\n            updateSubmitButton();\n        });\n        videoSelect.addEventListener('change', function() {\n            $(\"#chartType\").val('');\n            updateSubmitButton();\n        });\n        // Reset Button Event\n        $('#reset-button').click(function() {\n            $('#course-select').prop('selectedIndex', 0);\n            removeexistingvalues('user-select');\n            removeexistingvalues('video-select');\n            $('#chartType').prop('selectedIndex', 0);\n            $('#submit-button').prop('disabled', true);\n            $('#delete-button').prop('disabled', true);\n            while (emotionContainer.firstChild) {\n                emotionContainer.removeChild(emotionContainer.firstChild);\n            }\n            dataTable.innerHTML = '';\n            if (semotionChart !== null) {\n                semotionChart.destroy();\n            }\n        });\n        $(\"#delete-button\").click(function() {\n            confirmationModal();\n        });\n        $(\"#submit-button\").click(function() {\n            courseSelectedValue = courseSelect.value;\n            let studentSelectedValue = userSelect.value;\n            let videoSelectedValue = videoSelect.value;\n            let chartSelectedType = chartType.value;\n            if (courseSelect.value !== '' &&\n                userSelect.value == '' &&\n                videoSelect.value == '' &&\n                chartType.value !== '') {\n                let requestData = {\n                    values: {\n                        courseId: courseSelectedValue,\n                    }\n                };\n                let request = {\n                    methodname: 'blocks_emotionanalysis_course_result',\n                    args: requestData,\n                };\n                // eslint-disable-next-line no-unused-vars\n                Ajax.call([request])[0].done(function(data) {\n                    const selectedOption = courseSelect.options[courseSelect.selectedIndex]; // Get the selected option\n                    const selectedText = selectedOption.text; // Get the text of the selected option\n                    let emotionCounts = chartArray(data.videoEmotion);\n                    const emotionCountsArray = emotionCounts.map(item => ({\n                        count: item.countofemotion,\n                        state: item.emotion_state\n                    }));\n                    // eslint-disable-next-line no-unused-vars\n                    const [countOfSecond, totalDetectedEmotions] = updateEmotionCounts(emotionCountsArray);\n                    generategraph(Object.entries(countOfSecond), sctx, chartSelectedType);\n                    // eslint-disable-next-line no-console\n                    let barData = mergeEmotions(data.videoEmotion);\n                    while (dataTable.rows.length > 0) {\n                        dataTable.deleteRow(0);\n                    }\n                    // Create a new row for the dataTable headers\n                    let headerRow = dataTable.insertRow();\n                    // Create a single header cell for the additional information\n                    let headerCell = headerRow.insertCell();\n                    headerCell.classList.add('text-center');\n                    headerCell.colSpan = 3;\n                    headerCell.textContent = 'Additional Information';\n\n                    // Create a new row for Course Name\n                    let courseRow = dataTable.insertRow();\n                    let courseRowlabelCell = courseRow.insertCell();\n                    courseRowlabelCell.textContent = 'Course Name';\n                    let courseRowValue = courseRow.insertCell();\n                    courseRowValue.textContent = selectedText;\n                    if (data.flag)\n                    {\n                        // Create a new row for  Total student\n                        let studentRow = dataTable.insertRow();\n                        // Create cells for Total students name\n                        let studentLabelCell = studentRow.insertCell();\n                        studentLabelCell.textContent = 'Total Enrolled Student';\n\n                        let studentValueCell = studentRow.insertCell();\n                        studentValueCell.textContent = data.enrolledStudentsCount;\n\n                        let activeStudentRow = dataTable.insertRow();\n                        // Create cells for Total students name\n                        let activeStudentLabel = activeStudentRow.insertCell();\n                        activeStudentLabel.textContent = 'Number of Student Active in Course';\n\n                        let activeStudentCell = activeStudentRow.insertCell();\n                        activeStudentCell.textContent = data.totalStudents;\n\n                        let finishedActivityRow = dataTable.insertRow();\n                        // Create cells for Total students name\n                        let finishedActivityLabel = finishedActivityRow.insertCell();\n                        finishedActivityLabel.textContent = 'Number of Students Finished Activity (Even Single) ';\n\n                        let finishedActivityCell = finishedActivityRow.insertCell();\n                        finishedActivityCell.textContent = data.finishActivity;\n                    } else\n                    {\n                        // Create a new row for  Total student\n                        let studentRow = dataTable.insertRow();\n                        // Create cells for Total students name\n                        let studentLabelCell = studentRow.insertCell();\n                        studentLabelCell.textContent = 'Student Name';\n\n                        let studentValueCell = studentRow.insertCell();\n                        studentValueCell.textContent = data.userName;\n                    }\n\n\n                    const colors = {\n                        positive: \"blue\",\n                        neutral: \"yellow\",\n                        negative: \"red\",\n                    };\n                    while (emotionContainer.firstChild) {\n                        emotionContainer.removeChild(emotionContainer.firstChild);\n                    }\n                    // Bar Result for Videos\n                    barData.forEach(item => {\n                        const emotionSegment = document.createElement(\"div\");\n                        const emotionTextSegment = document.createElement(\"div\");\n                        emotionSegment.classList.add(\"emotion-bar\");\n                        emotionTextSegment.classList.add(\"emotion-bar-detail\");\n                        const maxCount = item.emotions.positive + item.emotions.neutral + item.emotions.negative;\n                        // Add the title here\n                        const titleSegment = document.createElement(\"div\");\n                        titleSegment.textContent = \"Lecture Title - \"+ item.resourceTitle;\n                        titleSegment.style.marginBottom = '10px'; // Add margin for spacing\n\n                        emotionTextSegment.appendChild(titleSegment);\n                        Object.entries(item.emotions).forEach(([emotion, count]) => {\n                            const segment = document.createElement(\"div\");\n                            segment.style.marginBottom = '20px';\n                            segment.style.backgroundColor = colors[emotion];\n                            segment.style.height = '20px';\n                            segment.style.width = `${(count / maxCount) * 100}%`;\n                            const labelSegment = document.createElement(\"div\");\n                            const percentage = ((count / maxCount) * 100).toFixed(2);\n                            labelSegment.style.marginBottom = '5px';\n                            labelSegment.textContent = `${emotion.charAt(0).toUpperCase() + emotion.slice(1)} ${percentage}%`;\n                            emotionTextSegment.appendChild(labelSegment);\n                            emotionSegment.appendChild(segment);\n                        });\n                        emotionContainer.appendChild(emotionTextSegment);\n                        emotionContainer.appendChild(emotionSegment);\n                    });\n                }).fail(function(data) {\n                    // eslint-disable-next-line no-console\n                    console.log(data);\n                });\n            }\n            if (\n                courseSelect.value !== '' &&\n                userSelect.value !== '' &&\n                videoSelect.value !== '' &&\n                chartType.value !== ''\n            ) {\n                for (let i = 0; i < response.length; i++) {\n                    let obj = response[i];\n                    if (\n                        obj.courseid == courseSelectedValue &&\n                        obj.userid == studentSelectedValue &&\n                        obj.instanceid == videoSelectedValue) {\n                        fetchRequest = obj;\n                        break;\n                    }\n                }\n                // eslint-disable-next-line no-unused-vars\n                let requestData = {\n                    values: {\n                        courseId: courseSelectedValue,\n                        userId: studentSelectedValue,\n                        instanceId: videoSelectedValue,\n                        resourceId: fetchRequest.resourceid,\n                    }\n                };\n                let request = {\n                    methodname: 'block_emotionanalysis_fetch_emotion_data',\n                    args: requestData,\n                };\n                Ajax.call([request])[0].done(function(data) {\n                    // eslint-disable-next-line no-console,no-unused-vars\n                    const emotionCountsArray = data.emotioncounts.map(item => ({\n                        count: item.countofemotion,\n                        state: item.emotion_state\n                    }));\n                    // eslint-disable-next-line no-unused-vars\n                    const [countOfSecond, totalDetectedEmotions] = updateEmotionCounts(emotionCountsArray);\n                    generategraph(Object.entries(countOfSecond), sctx, chartSelectedType);\n                    // eslint-disable-next-line no-unused-vars\n                    let totalDuration = fetchRequest.totalduration;\n                    // CreateDataRectangles(data.formattedData);\n\n                    // Clear the existing dataTable data for new generation\n                    while (dataTable.rows.length > 0) {\n                        dataTable.deleteRow(0);\n                    }\n                    // Create a new row for the dataTable headers\n                    let headerRow = dataTable.insertRow();\n                    // Create a single header cell for the additional information\n                    let headerCell = headerRow.insertCell();\n                    headerCell.classList.add('text-center');\n                    headerCell.colSpan = 3;\n                    headerCell.textContent = 'Additional Information';\n\n                    // Create a new row for student name\n                    let studentRow = dataTable.insertRow();\n\n                    // Create cells for student name\n                    let studentLabelCell = studentRow.insertCell();\n                    studentLabelCell.textContent = 'Student Name';\n\n                    let studentValueCell = studentRow.insertCell();\n                    studentValueCell.textContent = fetchRequest.userFullName;\n\n                    // Create a new row for activity start time\n                    let startTimeRow = dataTable.insertRow();\n\n                    // Create cells for activity start time\n                    let startTimeLabelCell = startTimeRow.insertCell();\n                    startTimeLabelCell.textContent = 'Activity Start Time';\n\n                    let activityStartTime = timeStampConvertor(fetchRequest.activity_start_time);\n                    let startTimeValueCell = startTimeRow.insertCell();\n                    startTimeValueCell.textContent = activityStartTime;\n\n                    // Create a new row for activity finish time\n                    let finishTimeRow = dataTable.insertRow();\n\n                    // Create cells for activity finish time\n                    let finishTimeLabelCell = finishTimeRow.insertCell();\n                    finishTimeLabelCell.textContent = 'Activity Finish Time';\n\n                    let finishTimeValueCell = finishTimeRow.insertCell();\n                    finishTimeValueCell.textContent = fetchRequest.activity_finish_time;\n\n                    let resetActivityRow = dataTable.insertRow();\n                    // Create cells for activity finish time\n                    let resetActivityLabelCell = resetActivityRow.insertCell();\n                    resetActivityLabelCell.textContent = 'Activity Reset Status';\n\n                    let resetActivityValueCell = resetActivityRow.insertCell();\n                    resetActivityValueCell.textContent = fetchRequest.reset_activity;\n\n                    let progressStatusRow = dataTable.insertRow();\n                    let progressValue = ((data.maxTimeStamp * 100) / fetchRequest.totalduration).toFixed(1);\n                    let minutes = Math.floor(data.maxTimeStamp / 60);\n                    let seconds = data.maxTimeStamp % 60;\n                    let timeFormatted = minutes + ':' + seconds.toString().padStart(2, '0');\n                    // Create cell for activity progress\n                    let progressStatusLabelCell = progressStatusRow.insertCell();\n                    progressStatusLabelCell.textContent = \"Progress\";\n                    let progressStatusValueCell = progressStatusRow.insertCell();\n                    progressStatusValueCell.textContent = progressValue + \"%\" + \" (\" + timeFormatted + \" minutes)\";\n\n                    let activityTotalDuration = dataTable.insertRow();\n                    // Creating cells for activity duration\n                    let activityTotalDurationLabelCell = activityTotalDuration.insertCell();\n                    activityTotalDurationLabelCell.textContent = 'Total Duration of Lecture';\n\n                    let totalMinutes = Math.floor(fetchRequest.totalduration / 60);\n                    let activityTotalDurationCellValue = activityTotalDuration.insertCell();\n                    activityTotalDurationCellValue.textContent = totalMinutes + ' Minutes';\n\n                    let totalNumberOfEmotions = dataTable.insertRow();\n                    let totalNumberOfEmotionsLabelCell = totalNumberOfEmotions.insertCell();\n                    totalNumberOfEmotionsLabelCell.textContent = 'Total Detected Number of Emotions';\n\n                    let totalNumberOfEmotionValueCell = totalNumberOfEmotions.insertCell();\n                    totalNumberOfEmotionValueCell.textContent = totalDetectedEmotions;\n\n                    let emotionTimeLine = dataTable.insertRow();\n                    emotionTimeLine.classList.add('text-center');\n                    let emotionTimeLineCell = emotionTimeLine.insertCell();\n                    emotionTimeLineCell.colSpan = 6;\n                    emotionTimeLineCell.textContent = \"Emotion Timeline Window\";\n                    // Create a new row for the dataTable headers\n                    let sessionRow = dataTable.insertRow();\n                    let sessionInformation;\n                    if (data.sessionData) {\n                        sessionInformation = \"Available\";\n                    }\n                    let sessionCell = sessionRow.insertCell();\n                    sessionCell.classList.add('text-center');\n                    sessionCell.colSpan = 3;\n                    sessionCell.textContent = 'Session Information ' + ' - ' + sessionInformation + ' Click Here';\n\n                    $('#delete-button').prop('disabled', false);\n                    let sessionTable = document.createElement('table');\n                    sessionTable.classList.add('table', 'table-striped', 'table-bordered');\n\n                    // Create the table headers\n                    let sheaderRow = sessionTable.insertRow();\n                    let idHeader = sheaderRow.insertCell();\n                    idHeader.textContent = 'ID';\n                    let startTimeHeader = sheaderRow.insertCell();\n                    startTimeHeader.textContent = 'Session Start Time';\n                    let finishTimeHeader = sheaderRow.insertCell();\n                    finishTimeHeader.textContent = 'Session Finish Time';\n                    let watchDurationHeader = sheaderRow.insertCell();\n                    watchDurationHeader.textContent = 'Watch Duration';\n\n                    data.sessionData.forEach(function (session, index) {\n                        let sessionRow = sessionTable.insertRow();\n                        let idCell = sessionRow.insertCell();\n                        idCell.textContent = index + 1;\n                        let startTimeCell = sessionRow.insertCell();\n                        startTimeCell.textContent = timeStampConvertor(session.session_start_time);\n                        let finishTimeCell = sessionRow.insertCell();\n                        finishTimeCell.textContent = timeStampConvertor(session.session_finish_time);\n                        let watchDurationCell = sessionRow.insertCell();\n                        watchDurationCell.textContent = session.start_watch_time + ' - ' + session.finish_watch_time;\n                    });\n                    $(sessionCell).on('click', () => {\n                        if (sessionTable.parentNode === document.body) {\n                            document.body.removeChild(sessionTable);\n                        } else {\n                            document.body.appendChild(sessionTable);\n                        }\n                    });\n                });\n            }\n        });\n\n        /**\n         * Ajax call for fetching the available data\n         */\n        function resultFetcher() {\n            // eslint-disable-next-line no-unused-vars\n            let UserId = $(\"#UsedIdVal\").val();\n            let request = {\n                methodname: 'block_emotionanalysis_fetch_captured_data',\n                args: {'UserId': UserId}\n            };\n            Ajax.call([request])[0].done(function(data) {\n                response = data.fetchData;\n                const courses = data.fetchData.map(item => ({\n                    courseId: item.courseid,\n                    courseName: item.coursename\n                }));\n                // Remove duplicate values\n                const uniqueCourses = courses.reduce((unique, course) => {\n                    const isCourseExist = unique.find(c => c.courseId === course.courseId && c.courseName === course.courseName);\n                    if (!isCourseExist) {\n                        unique.push(course);\n                    }\n                    return unique;\n                }, []);\n                // Populating the values into Select Element\n                uniqueCourses.forEach(course => {\n                    const option = document.createElement('option');\n                    option.value = course.courseId;\n                    option.textContent = course.courseName;\n                    courseSelect.appendChild(option);\n                });\n                // Attach event listener to the course select element\n                courseSelect.addEventListener('change', function(event) {\n                    handleCourseSelection(event, data);\n                });\n                // Attach event listener to the course select element\n                videoSelect.addEventListener('change', function(event) {\n                    handleVideoSelection(event, data);\n                });\n            }).fail(function(data) {\n                // eslint-disable-next-line no-console\n                console.log(data);\n            });\n        }\n        /**\n         *@param {int} event id of the event for filtering\n         *@param {array} data is response from ajax call\n         */\n        // Function to handle course selection\n        /**\n         * @param {int} event id of the event for filter of data\n         * @param {array} data is response of ajax call\n         */\n        function handleCourseSelection(event, data) {\n            updateSubmitButton();\n            $('#delete-button').prop('disabled', true);\n            $(\"#chartType\").val('');\n            const selectedCourseId = event.target.value;\n            // Filter videos based on the selected course\n            const filteredVideos = data.fetchData.filter(item => item.courseid == selectedCourseId);\n            const videoSelect = document.getElementById('video-select');\n            removeexistingvalues('video-select');\n            // Populate the video select element\n            const videoIds = [...new Set(filteredVideos.map(item => item.instanceid))];\n            videoIds.forEach(videoId => {\n                const video = filteredVideos.find(item => item.instanceid == videoId);\n                const option = document.createElement('option');\n                option.value = videoId;\n                option.textContent = video.lectureTitle;\n                videoSelect.appendChild(option);\n            });\n        }\n\n// Function to handle video selection\n        /**\n         * @param {int} event id of the event for filter of data\n         * @param {array} data is response of ajax call\n         */\n        function handleVideoSelection(event, data) {\n            updateSubmitButton();\n            $('#delete-button').prop('disabled', true);\n            const selectedVideoId = event.target.value;\n            const courseSelectedValue = document.getElementById('course-select').value;\n            // Filter users based on the selected video and course\n            // eslint-disable-next-line max-len\n            const filteredUsers = data.fetchData.filter(item => item.instanceid == selectedVideoId && item.courseid == courseSelectedValue);\n            const userSelect = document.getElementById('user-select');\n            removeexistingvalues('user-select');\n            // Populate the user select element\n            const userIds = [...new Set(filteredUsers.map(item => item.userid))];\n            userIds.forEach(userId => {\n                const user = filteredUsers.find(item => item.userid == userId);\n                const option = document.createElement('option');\n                option.value = userId;\n                option.textContent = user.userFullName;\n                userSelect.appendChild(option);\n            });\n        }\n        /**\n         *@param {string} id of the select element\n         */\n        function removeexistingvalues(id) {\n            // eslint-disable-next-line no-console\n            const selectedElement = document.getElementById(id);\n            if (id !== 'chartType') {\n                if (selectedElement.options.length > 1) {\n                    // Remove existing options\n                    while (selectedElement.options.length > 1) {\n                        selectedElement.options[1].remove();\n                    }\n                }\n            }\n        }\n        // eslint-disable-next-line valid-jsdoc\n        /**\n         *@param {array} countsArray\n         */\n        function updateEmotionCounts(countsArray) {\n            const emotion = {\n                angry: 0,\n                disgusted: 0,\n                fearful: 0,\n                happy: 0,\n                neutral: 0,\n                sad: 0,\n                surprised: 0\n            };\n            let totalDetectedEmotions = 0;\n            for (let i = 0; i < countsArray.length; i++) {\n                const {count, state} = countsArray[i];\n                if (emotion.hasOwnProperty(state)) {\n                    emotion[state] = count;\n                    totalDetectedEmotions += count;\n                }\n            }\n            return [emotion, totalDetectedEmotions];\n        }\n        /**\n         *Function to validate data\n         */\n        function updateSubmitButton() {\n            /*if (courseSelect.value !== '' && userSelect.value !== '' && videoSelect.value !== '' && chartType.value !== '') {\n                $('#submit-button').prop('disabled', false);\n            } else {\n                $('#submit-button').prop('disabled', true);\n            }*/\n        }\n        /**\n         *@param {array} input of emotions to generate chart\n         *@param {string} ctx of graph area\n         *@param {string} chartType of type of graph\n         */\n        function generategraph(input, ctx, chartType) {\n            // eslint-disable-next-line no-eq-null\n            if (ctx.id === 'schart' && semotionChart != null) {\n                semotionChart.destroy();\n                // eslint-disable-next-line no-eq-null\n            }\n            const newChart = new Chart(ctx, {\n                type: chartType,\n                data: {\n                    labels: input.map(i => i[0].charAt(0).toUpperCase() + i[0].slice(1)),\n                    datasets: [{\n                        label: 'Count of Emotions',\n                        data: input.map(i => i[1]),\n                        borderWidth: 1,\n                        backgroundColor: [\n                            'rgba(255, 99, 132)',\n                            'rgba(255, 159, 64)',\n                            'rgba(255, 205, 86)',\n                            'rgba(75, 192, 192)',\n                            'rgba(54, 162, 235)',\n                            'rgba(153, 102, 255)',\n                            'rgba(201, 203, 207)'\n                        ],\n                    }]\n                },\n            });\n            if (ctx.id === 'schart') {\n                semotionChart = newChart;\n            }\n        }\n        /**\n         * Modal to ask for confirmation to delete the data\n         */\n        function confirmationModal() {\n            ModalFactory.create({\n                type: ModalFactory.types.SAVE_CANCEL,\n                title: String.get_string('delete_record_confirmation', 'block_emotionanalysis'),\n                body: String.get_string('delete_cofirmation_body', 'block_emotionanalysis'),\n            }).then(function(modal) {\n                modal.setSaveButtonText(\"Yes\");\n                let root = modal.getRoot();\n                root.on(ModalEvents.save, function() {\n                    let footer = Y.one('.modal-footer');\n                    footer.setContent('Deleting...');\n                    let spinner = M.util.add_spinner(Y, footer);\n                    spinner.show();\n                    deleteRecords();\n                });\n                modal.show();\n            });\n        }\n        /**\n         * Ajax Call for delete records\n         * */\n        function deleteRecords() {\n            let deleteReqeustData = {\n                values: {\n                    courseId:  courseSelect.value,\n                    userId: userSelect.value,\n                    instanceId: videoSelect.value,\n                    resourceId: fetchRequest.resourceid,\n                }\n            };\n            let deleteRequest = {\n                methodname: 'blocks_emotionanalysis_delete_records',\n                args: deleteReqeustData,\n            };\n            // eslint-disable-next-line no-unused-vars\n            Ajax.call([deleteRequest])[0].done(function(data) {\n                window.location.reload();\n                // eslint-disable-next-line no-unused-vars\n            }).fail(function(data) {\n                window.location.reload();\n            });\n        }\n        // Function to create data rectangles and tooltips\n        /**\n         *function to represent data on timeline\n         *@param {array} formattedData of the values of emotions\n         */\n        // eslint-disable-next-line no-unused-vars\n        function createDataRectangles(formattedData) {\n            const dataContainer = document.getElementById('data-container');\n            const tooltip = document.getElementById('tooltip');\n            // eslint-disable-next-line no-unused-vars\n            formattedData.forEach((data, index) => {\n                const rectangle = document.createElement('div');\n                rectangle.className = 'data-rectangle';\n                rectangle.textContent = data.value;\n\n                rectangle.addEventListener('mouseover', (event) => {\n                    const tooltip = document.getElementById('tooltip');\n                    const rect = event.target.getBoundingClientRect();\n                    // eslint-disable-next-line no-console\n                    tooltip.style.left = rect.left + 'px';\n                    tooltip.style.top = rect.top - 30 + 'px'; // Adjust the tooltip position\n                    tooltip.textContent = `${data.label}: ${data.value}`;\n                    tooltip.style.display = 'inline-block';\n                });\n\n                // Add a mouseout event listener to hide the tooltip\n                rectangle.addEventListener('mouseout', () => {\n                    tooltip.style.display = 'none';\n                });\n\n                dataContainer.appendChild(rectangle);\n            });\n        }\n        // Format the timestamp to minutes:seconds\n        /**\n         *@param {int} timestampInSeconds\n         */\n        // eslint-disable-next-line no-unused-vars\n        function formatTimestamp(timestampInSeconds) {\n            const minutes = Math.floor(timestampInSeconds / 60);\n            const seconds = timestampInSeconds % 60;\n            return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n        }\n        /**\n         * function to seprate result from whole data\n         *@param {array} existingData\n         */\n        function chartArray(existingData) {\n            // Helper object to keep track of merged values\n            const mergedMap = {};\n\n            existingData.forEach(item => {\n                item.emotions.forEach(emotion => {\n                    const emotionState = emotion.emotion_state;\n                    const countOfEmotion = emotion.count;\n\n                    if (!mergedMap[emotionState]) {\n                        mergedMap[emotionState] = {\n                            emotion_state: emotionState,\n                            countofemotion: 0,\n                        };\n                    }\n\n                    mergedMap[emotionState].countofemotion += countOfEmotion;\n                });\n            });\n\n            // Convert the mergedMap object back to an array\n            const newData = Object.values(mergedMap);\n\n            return newData;\n        }\n        /**\n         *Function To mergeEmotions\n         * @param {array} videoEmotionData\n         */\n        function mergeEmotions(videoEmotionData) {\n            const mergedData = {};\n\n            videoEmotionData.forEach((videoEmotion) => {\n                const resourceid = videoEmotion.resourceid;\n                const resourceTitle = videoEmotion.resourceTitle;\n                const emotions = videoEmotion.emotions;\n\n                if (!mergedData[resourceid]) {\n                    mergedData[resourceid] = {\n                        resourceid: resourceid,\n                        resourceTitle: resourceTitle,\n                        emotions: {\n                            positive: 0,\n                            neutral: 0,\n                            negative: 0,\n                        },\n                    };\n                }\n\n                const mergedEmotions = mergedData[resourceid].emotions;\n\n                emotions.forEach((emotion) => {\n                    const emotionState = emotion.emotion_state;\n                    const count = emotion.count;\n\n                    // Categorize the emotion\n                    const category = categorizeEmotion(emotionState);\n                    if (category === \"positive\") {\n                        mergedEmotions.positive += count;\n                    } else if (category === \"neutral\") {\n                        mergedEmotions.neutral += count;\n                    } else if (category === \"negative\") {\n                        mergedEmotions.negative += count;\n                    }\n                });\n            });\n\n            return Object.values(mergedData);\n        }\n\n        /**\n         * @param {string} emotionState\n         *function to categotize Emotion State\n         */\n        function categorizeEmotion(emotionState) {\n            if ([\"happy\", \"surprised\"].includes(emotionState)) {\n                return \"positive\";\n            } else if (emotionState === \"neutral\") {\n                return \"neutral\";\n            } else {\n                return \"negative\";\n            }\n        }\n        // Function to create an emotion bar\n        /**\n         *@param {string} container\n         * @param {string} type\n         * @param {int} count\n         */\n        // eslint-disable-next-line no-unused-vars\n        function createEmotionSegment(container, type, count) {\n            const segment = document.createElement('div');\n            segment.className = `emotion-segment ${type}`;\n            segment.style.width = `${count}%`;\n            container.appendChild(segment);\n        }\n    });\n\n/**\n * @param {int} unixTimeStamp input unix timestamp\n * @returns {string} readable timestamp\n */\nfunction timeStampConvertor(unixTimeStamp) {\n    const date = new Date(unixTimeStamp * 1000);\n\n    // Extract the different components of the date and time\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // Zero-padding for single-digit months\n    const day = String(date.getDate()).padStart(2, '0'); // Zero-padding for single-digit days\n    const hours = String(date.getHours()).padStart(2, '0'); // Zero-padding for single-digit hours\n    const minutes = String(date.getMinutes()).padStart(2, '0'); // Zero-padding for single-digit minutes\n    const seconds = String(date.getSeconds()).padStart(2, '0'); // Zero-padding for single-digit seconds\n    // Construct the readable timestamp\n    const readableTimestamp = `${day}-${month}-${year} ${hours}:${minutes}:${seconds}`;\n    return readableTimestamp;\n}"],"names":["timeStampConvertor","unixTimeStamp","date","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","define","$","Ajax","Chart","ModalFactory","ModalEvents","response","fetchRequest","semotionChart","sctx","document","getElementById","courseSelect","userSelect","videoSelect","chartType","dataTable","emotionContainer","courseSelectedValue","removeexistingvalues","id","selectedElement","options","length","remove","updateEmotionCounts","countsArray","emotion","angry","disgusted","fearful","happy","neutral","sad","surprised","totalDetectedEmotions","i","count","state","hasOwnProperty","generategraph","input","ctx","destroy","newChart","type","data","labels","map","charAt","toUpperCase","slice","datasets","label","borderWidth","backgroundColor","ready","request","methodname","args","val","call","done","fetchData","item","courseId","courseid","courseName","coursename","reduce","unique","course","find","c","push","forEach","option","createElement","value","textContent","appendChild","addEventListener","event","prop","selectedCourseId","target","filteredVideos","filter","Set","instanceid","videoId","video","lectureTitle","handleCourseSelection","selectedVideoId","filteredUsers","userid","userId","user","userFullName","handleVideoSelection","fail","console","log","resultFetcher","click","firstChild","removeChild","innerHTML","create","types","SAVE_CANCEL","title","get_string","body","then","modal","setSaveButtonText","getRoot","on","save","footer","Y","one","setContent","M","util","add_spinner","show","deleteRequest","values","instanceId","resourceId","resourceid","window","location","reload","deleteRecords","studentSelectedValue","videoSelectedValue","chartSelectedType","selectedText","selectedIndex","text","emotionCountsArray","existingData","mergedMap","emotions","emotionState","emotion_state","countOfEmotion","countofemotion","Object","chartArray","videoEmotion","countOfSecond","entries","barData","videoEmotionData","mergedData","resourceTitle","positive","negative","mergedEmotions","category","includes","categorizeEmotion","mergeEmotions","rows","deleteRow","headerCell","insertRow","insertCell","classList","add","colSpan","courseRow","flag","studentRow","enrolledStudentsCount","activeStudentRow","totalStudents","finishedActivityRow","finishActivity","userName","colors","emotionSegment","emotionTextSegment","maxCount","titleSegment","style","marginBottom","_ref","segment","height","width","labelSegment","percentage","toFixed","obj","emotioncounts","totalduration","startTimeRow","activityStartTime","activity_start_time","finishTimeRow","activity_finish_time","resetActivityRow","reset_activity","progressStatusRow","progressValue","maxTimeStamp","timeFormatted","Math","floor","toString","activityTotalDuration","totalMinutes","totalNumberOfEmotions","emotionTimeLine","emotionTimeLineCell","sessionInformation","sessionRow","sessionData","sessionCell","sessionTable","sheaderRow","session","index","session_start_time","session_finish_time","start_watch_time","finish_watch_time","parentNode"],"mappings":"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"}