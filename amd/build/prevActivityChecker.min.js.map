{"version":3,"file":"prevActivityChecker.min.js","sources":["../src/prevActivityChecker.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript to initialise the recognition of a student facial expression.\n *\n * @module     block_emotionanalysis/prevActivityChecker\n * @copyright  2023 Rohit <rx18008@edu.rta.lv>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n    'jquery', 'core/ajax', './recognition', 'core/modal_factory', 'core/modal_events', 'core/str','./youTubeManager'],\n    // eslint-disable-next-line no-unused-vars\n    function($, Ajax, recognition, ModalFactory, ModalEvents, String,youTubeManager) {\n        // eslint-disable-next-line no-unused-vars\n        let unfinishActivityText = String.get_string('unfinish_activity_text', 'block_emotionanalysis');\n        // eslint-disable-next-line no-unused-vars\n        let finishActivityText = String.get_string('finished_activity_text', 'block_emotionanalysis');\n        let videoType = recognition.value;\n        let totalDuration;\n        let request;\n        let requestData;\n        if (videoType === 19) {\n            totalDuration = recognition.videoElement.duration;\n            if (isNaN(totalDuration)) {\n                location.reload();\n            }\n            previousActivityChecker();\n        } else {\n        // eslint-disable-next-line no-undef,promise/catch-or-return\n        youTubeManager.readyPromise.then(() => {\n            // eslint-disable-next-line no-unused-vars\n            youTubeManager.player.addEventListener('onReady', function(event) {\n                totalDuration = youTubeManager.totalDuration;\n                // eslint-disable-next-line no-console\n                    previousActivityChecker();\n            });\n        });\n        }\n        /**\n         *Function to check previous activity\n         */\n        function previousActivityChecker() {\n            requestData = {\n                \"values\": {\n                    courseId: recognition.courseId,\n                    deleteConfirmation: 0,\n                    instanceId: recognition.instanceId,\n                    resourceId: recognition.resourceId,\n                }\n            };\n            // eslint-disable-next-line no-unused-vars\n            request = {\n                methodname: 'blocks_emotionanalysis_prev_activity_checker',\n                args: requestData,\n            };\n            Ajax.call([request])[0].done(function(data) {\n                if (data.activity_finish_date) {\n                    showModal(data.timestamp, finishActivityText, data.activity_finish_date, videoType);\n                } else {\n                    let totalDuration = recognition.videoElement.duration;\n                    if (isNaN(totalDuration)) {\n                        location.reload();\n                    }\n                    if (data.timestamp !== null) {\n                        if (Math.abs(totalDuration - data.timestamp)) {\n                            showModal(data.timestamp, unfinishActivityText, data.activity_finish_date, videoType);\n                        }\n                    }\n                }\n                // eslint-disable-next-line no-unused-vars\n            }).fail(function (data) {\n                // eslint-disable-next-line no-console\n                console.log(data);\n            });\n        }\n        /**\n         *@param {int} timestamp from previous activity\n         *@param {Text} msgText text for confirmation\n         *@param {bool} activityFinishStatus true or false for the confirmation\n         * @param {int} videoType to check the video Type if embedded or normal\n         */\n        function showModal(timestamp, msgText, activityFinishStatus, videoType) {\n            // eslint-disable-next-line promise/catch-or-return\n            ModalFactory.create({\n                type: ModalFactory.types.SAVE_CANCEL,\n                title: String.get_string('previous_activity', 'block_emotionanalysis'),\n                // eslint-disable-next-line max-len\n                body: msgText,\n                // eslint-disable-next-line promise/always-return\n            }).then(function(modal) {\n                // eslint-disable-next-line camelcase,promise/always-return\n                if (activityFinishStatus) {\n                    modal.setSaveButtonText(\"No\");\n                    modal.modal.find('.btn-secondary[data-action=\"cancel\"]').text('Yes');\n                } else {\n                    modal.setSaveButtonText('Yes');\n                    modal.modal.find('.btn-secondary[data-action=\"cancel\"]').text('No');\n                }\n                let root = modal.getRoot();\n                root.on(ModalEvents.save, function() {\n                    if (videoType === 17) {\n                        youTubeManager.player.seekTo(timestamp, false);\n                    } else {\n                        recognition.videoElement.currentTime = timestamp;\n                    }\n                });\n                root.on(ModalEvents.cancel, function() {\n                    modalHandler(timestamp, activityFinishStatus);\n                });\n                root.on(ModalEvents.outsideClick, function() {\n                    modalHandler(timestamp, activityFinishStatus);\n                });\n                // eslint-disable-next-line babel/no-unused-expressions\n                modal.modal.find('.close').hide();\n                modal.show();\n            });\n        }\n        /**\n         * @param {int} timestamp passed from previous Modal\n         * @param {bool} activityFinishStatus for further actions\n         * Handling the Modal for cancel events\n         * */\n        function modalHandler(timestamp, activityFinishStatus) {\n            ModalFactory.create({\n                type: ModalFactory.types.SAVE_CANCEL,\n                title: String.get_string('confirmation_title', 'block_emotionanalysis'),\n                body: String.get_string('confirmation_warning', 'block_emotionanalysis'),\n            }).then(function(modal) {\n                // eslint-disable-next-line no-console\n                modal.setSaveButtonText(String.get_string('confirmation_yes', 'block_emotionanalysis'));\n                if (activityFinishStatus) {\n                    modal.modal.find('.btn-secondary[data-action=\"cancel\"]').text(\"No\");\n                } else {\n                    // eslint-disable-next-line max-len\n                    modal.modal.find('.btn-secondary[data-action=\"cancel\"]').text(\"No I will Resume\");\n                }\n                let root = modal.getRoot();\n                root.on(ModalEvents.save, function() {\n                    requestData.values.deleteConfirmation = 1;\n                    Ajax.call([request])[0].done(function(data) {\n                        // eslint-disable-next-line no-console\n                        console.log(data);\n                    });\n                });\n                root.on(ModalEvents.cancel, function() {\n                    if (!activityFinishStatus) {\n                        recognition.lectureVideo.currentTime = timestamp;\n                    }\n                });\n                root.on(ModalEvents.outsideClick, function() {\n                    if (activityFinishStatus) {\n                        showModal(timestamp, finishActivityText, activityFinishStatus);\n                    } else {\n                        showModal(timestamp, unfinishActivityText, activityFinishStatus);\n                    }\n                });\n                modal.modal.find('.close').hide();\n                modal.show();\n            });\n        }\n    });\n\n"],"names":["define","$","Ajax","recognition","ModalFactory","ModalEvents","String","youTubeManager","totalDuration","request","requestData","unfinishActivityText","get_string","finishActivityText","videoType","value","previousActivityChecker","courseId","deleteConfirmation","instanceId","resourceId","methodname","args","call","done","data","activity_finish_date","showModal","timestamp","videoElement","duration","isNaN","location","reload","Math","abs","fail","console","log","msgText","activityFinishStatus","create","type","types","SAVE_CANCEL","title","body","then","modal","setSaveButtonText","find","text","root","getRoot","on","save","player","seekTo","currentTime","cancel","modalHandler","outsideClick","hide","show","values","lectureVideo","readyPromise","addEventListener","event"],"mappings":";;;;;;;AAsBAA,mDAAO,CACH,SAAU,YAAa,gBAAiB,qBAAsB,oBAAqB,WAAW,qBAE9F,SAASC,EAAGC,KAAMC,YAAaC,aAAcC,YAAaC,OAAOC,oBAMzDC,cACAC,QACAC,YANAC,qBAAuBL,OAAOM,WAAW,yBAA0B,yBAEnEC,mBAAqBP,OAAOM,WAAW,yBAA0B,yBACjEE,UAAYX,YAAYY,eAwBnBC,0BACLN,YAAc,QACA,CACNO,SAAUd,YAAYc,SACtBC,mBAAoB,EACpBC,WAAYhB,YAAYgB,WACxBC,WAAYjB,YAAYiB,aAIhCX,QAAU,CACNY,WAAY,+CACZC,KAAMZ,aAEVR,KAAKqB,KAAK,CAACd,UAAU,GAAGe,MAAK,SAASC,SAC9BA,KAAKC,qBACLC,UAAUF,KAAKG,UAAWf,mBAAoBY,KAAKC,qBAAsBZ,eACtE,KACCN,cAAgBL,YAAY0B,aAAaC,SACzCC,MAAMvB,gBACNwB,SAASC,SAEU,OAAnBR,KAAKG,WACDM,KAAKC,IAAI3B,cAAgBiB,KAAKG,YAC9BD,UAAUF,KAAKG,UAAWjB,qBAAsBc,KAAKC,qBAAsBZ,eAKxFsB,MAAK,SAAUX,MAEdY,QAAQC,IAAIb,kBASXE,UAAUC,UAAWW,QAASC,qBAAsB1B,WAEzDV,aAAaqC,OAAO,CAChBC,KAAMtC,aAAauC,MAAMC,YACzBC,MAAOvC,OAAOM,WAAW,oBAAqB,yBAE9CkC,KAAMP,UAEPQ,MAAK,SAASC,OAETR,sBACAQ,MAAMC,kBAAkB,MACxBD,MAAMA,MAAME,KAAK,wCAAwCC,KAAK,SAE9DH,MAAMC,kBAAkB,OACxBD,MAAMA,MAAME,KAAK,wCAAwCC,KAAK,WAE9DC,KAAOJ,MAAMK,UACjBD,KAAKE,GAAGjD,YAAYkD,MAAM,WACJ,KAAdzC,UACAP,eAAeiD,OAAOC,OAAO7B,WAAW,GAExCzB,YAAY0B,aAAa6B,YAAc9B,aAG/CwB,KAAKE,GAAGjD,YAAYsD,QAAQ,WACxBC,aAAahC,UAAWY,yBAE5BY,KAAKE,GAAGjD,YAAYwD,cAAc,WAC9BD,aAAahC,UAAWY,yBAG5BQ,MAAMA,MAAME,KAAK,UAAUY,OAC3Bd,MAAMe,mBAQLH,aAAahC,UAAWY,sBAC7BpC,aAAaqC,OAAO,CAChBC,KAAMtC,aAAauC,MAAMC,YACzBC,MAAOvC,OAAOM,WAAW,qBAAsB,yBAC/CkC,KAAMxC,OAAOM,WAAW,uBAAwB,2BACjDmC,MAAK,SAASC,OAEbA,MAAMC,kBAAkB3C,OAAOM,WAAW,mBAAoB,0BAC1D4B,qBACAQ,MAAMA,MAAME,KAAK,wCAAwCC,KAAK,MAG9DH,MAAMA,MAAME,KAAK,wCAAwCC,KAAK,wBAE9DC,KAAOJ,MAAMK,UACjBD,KAAKE,GAAGjD,YAAYkD,MAAM,WACtB7C,YAAYsD,OAAO9C,mBAAqB,EACxChB,KAAKqB,KAAK,CAACd,UAAU,GAAGe,MAAK,SAASC,MAElCY,QAAQC,IAAIb,YAGpB2B,KAAKE,GAAGjD,YAAYsD,QAAQ,WACnBnB,uBACDrC,YAAY8D,aAAaP,YAAc9B,cAG/CwB,KAAKE,GAAGjD,YAAYwD,cAAc,WAE1BlC,UAAUC,UADVY,qBACqB3B,mBAEAF,qBAFoB6B,yBAKjDQ,MAAMA,MAAME,KAAK,UAAUY,OAC3Bd,MAAMe,UAxII,KAAdjD,WACAN,cAAgBL,YAAY0B,aAAaC,SACrCC,MAAMvB,gBACNwB,SAASC,SAEbjB,2BAGJT,eAAe2D,aAAanB,MAAK,KAE7BxC,eAAeiD,OAAOW,iBAAiB,WAAW,SAASC,OACvD5D,cAAgBD,eAAeC,cAE3BQ"}